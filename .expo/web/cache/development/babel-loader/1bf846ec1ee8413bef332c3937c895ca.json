{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\", \"sceneContainerStyle\"],\n    _excluded2 = [\"lazy\", \"tabBarOptions\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, TabRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport BottomTabView from \"../views/BottomTabView\";\n\nfunction BottomTabNavigator(_ref) {\n  var id = _ref.id,\n      initialRouteName = _ref.initialRouteName,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n\n  var lazy = restWithDeprecated.lazy,\n      tabBarOptions = restWithDeprecated.tabBarOptions,\n      rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n\n  var defaultScreenOptions = {};\n\n  if (tabBarOptions) {\n    var _tabBarOptions$labelP;\n\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition: (_tabBarOptions$labelP = tabBarOptions.labelPosition) != null ? _tabBarOptions$labelP : tabBarOptions.adaptive === false ? 'below-icon' : undefined,\n      tabBarStyle: [{\n        display: tabBarOptions.tabBarVisible ? 'none' : 'flex'\n      }, defaultScreenOptions.tabBarStyle]\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(tabBarOptions, \"Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.\");\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.\");\n  }\n\n  var _useNavigationBuilder = useNavigationBuilder(TabRouter, {\n    id: id,\n    initialRouteName: initialRouteName,\n    backBehavior: backBehavior,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  return React.createElement(NavigationContent, null, React.createElement(BottomTabView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    sceneContainerStyle: sceneContainerStyle\n  })));\n}\n\nexport default createNavigatorFactory(BottomTabNavigator);","map":{"version":3,"sources":["navigators/createBottomTabNavigator.tsx"],"names":["createNavigatorFactory","TabRouter","useNavigationBuilder","React","warnOnce","BottomTabView","BottomTabNavigator","id","initialRouteName","backBehavior","children","screenListeners","screenOptions","sceneContainerStyle","restWithDeprecated","lazy","tabBarOptions","rest","defaultScreenOptions","Object","assign","tabBarHideOnKeyboard","keyboardHidesTabBar","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarActiveBackgroundColor","activeBackgroundColor","tabBarInactiveBackgroundColor","inactiveBackgroundColor","tabBarAllowFontScaling","allowFontScaling","tabBarShowLabel","showLabel","tabBarLabelStyle","labelStyle","tabBarIconStyle","iconStyle","tabBarItemStyle","tabStyle","tabBarLabelPosition","labelPosition","adaptive","undefined","tabBarStyle","display","tabBarVisible","keys","forEach","key","JSON","stringify","state","descriptors","navigation","NavigationContent"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { createNavigatorFactory, TabRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport BottomTabView from '../views/BottomTabView';\nfunction BottomTabNavigator(_ref) {\n  let {\n    id,\n    initialRouteName,\n    backBehavior,\n    children,\n    screenListeners,\n    screenOptions,\n    sceneContainerStyle,\n    ...restWithDeprecated\n  } = _ref;\n  const {\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n  let defaultScreenOptions = {};\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition: tabBarOptions.labelPosition ?? (tabBarOptions.adaptive === false ? 'below-icon' : undefined),\n      tabBarStyle: [{\n        display: tabBarOptions.tabBarVisible ? 'none' : 'flex'\n      }, defaultScreenOptions.tabBarStyle]\n    });\n    Object.keys(defaultScreenOptions).forEach(key => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(tabBarOptions, `Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(defaultScreenOptions, null, 2)}\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.`);\n  }\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, `Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.`);\n  }\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = useNavigationBuilder(TabRouter, {\n    id,\n    initialRouteName,\n    backBehavior,\n    children,\n    screenListeners,\n    screenOptions,\n    defaultScreenOptions\n  });\n  return /*#__PURE__*/React.createElement(NavigationContent, null, /*#__PURE__*/React.createElement(BottomTabView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    sceneContainerStyle: sceneContainerStyle\n  })));\n}\nexport default createNavigatorFactory(BottomTabNavigator);\n//# sourceMappingURL=createBottomTabNavigator.js.map"]},"metadata":{},"sourceType":"module"}