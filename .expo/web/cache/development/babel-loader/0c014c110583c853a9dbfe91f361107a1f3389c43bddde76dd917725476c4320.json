{"ast":null,"code":"var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nvar AUTO_ID_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nvar lastPushTime = 0;\nvar lastRandChars = [];\nexport function generateDatabaseId() {\n  var serverTimeOffset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var timeStampChars = new Array(8);\n  var now = new Date().getTime() + serverTimeOffset;\n  var duplicateTime = now === lastPushTime;\n  lastPushTime = now;\n  for (var i = 7; i >= 0; i -= 1) {\n    timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n    now = Math.floor(now / 64);\n  }\n  if (now !== 0) {\n    throw new Error('We should have converted the entire timestamp.');\n  }\n  var id = timeStampChars.join('');\n  if (!duplicateTime) {\n    for (var _i = 0; _i < 12; _i += 1) {\n      lastRandChars[_i] = Math.floor(Math.random() * 64);\n    }\n  } else {\n    var _i2;\n    for (_i2 = 11; _i2 >= 0 && lastRandChars[_i2] === 63; _i2 -= 1) {\n      lastRandChars[_i2] = 0;\n    }\n    lastRandChars[_i2] += 1;\n  }\n  for (var _i3 = 0; _i3 < 12; _i3++) {\n    id += PUSH_CHARS.charAt(lastRandChars[_i3]);\n  }\n  if (id.length !== 20) {\n    throw new Error('Length should be 20.');\n  }\n  return id;\n}\nexport function generateFirestoreId() {\n  var autoId = '';\n  for (var i = 0; i < 20; i++) {\n    autoId += AUTO_ID_CHARS.charAt(Math.floor(Math.random() * AUTO_ID_CHARS.length));\n  }\n  return autoId;\n}","map":{"version":3,"names":["PUSH_CHARS","AUTO_ID_CHARS","lastPushTime","lastRandChars","generateDatabaseId","serverTimeOffset","timeStampChars","Array","now","Date","getTime","duplicateTime","i","charAt","Math","floor","Error","id","join","random","length","generateFirestoreId","autoId"],"sources":["C:/Users/dansf/Desktop/reactNative/PJ/node_modules/@react-native-firebase/app/lib/common/id.js"],"sourcesContent":["const PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst AUTO_ID_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n// timestamp of last push, used to prevent local collisions if you push twice in one ms.\nlet lastPushTime = 0;\n\n// we generate 72-bits of randomness which get turned into 12 characters and appended to the\n// timestamp to prevent collisions with other clients.  We store the last characters we\n// generated because in the event of a collision, we'll use those same characters except\n// \"incremented\" by one.\nconst lastRandChars = [];\n\n/**\n * Generate a firebase id - for use with ref().push(val, cb) - e.g. -KXMr7k2tXUFQqiaZRY4'\n * @param serverTimeOffset - pass in server time offset from native side\n * @returns {string}\n */\nexport function generateDatabaseId(serverTimeOffset = 0) {\n  const timeStampChars = new Array(8);\n  let now = new Date().getTime() + serverTimeOffset;\n  const duplicateTime = now === lastPushTime;\n\n  lastPushTime = now;\n\n  for (let i = 7; i >= 0; i -= 1) {\n    timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n    now = Math.floor(now / 64);\n  }\n\n  if (now !== 0) {\n    throw new Error('We should have converted the entire timestamp.');\n  }\n\n  let id = timeStampChars.join('');\n\n  if (!duplicateTime) {\n    for (let i = 0; i < 12; i += 1) {\n      lastRandChars[i] = Math.floor(Math.random() * 64);\n    }\n  } else {\n    // if the timestamp hasn't changed since last push,\n    // use the same random number, but increment it by 1.\n    let i;\n    for (i = 11; i >= 0 && lastRandChars[i] === 63; i -= 1) {\n      lastRandChars[i] = 0;\n    }\n\n    lastRandChars[i] += 1;\n  }\n\n  for (let i = 0; i < 12; i++) {\n    id += PUSH_CHARS.charAt(lastRandChars[i]);\n  }\n\n  if (id.length !== 20) {\n    throw new Error('Length should be 20.');\n  }\n\n  return id;\n}\n\n/**\n * Generate a firestore auto id for use with collection/document .add()\n * @return {string}\n */\nexport function generateFirestoreId() {\n  let autoId = '';\n\n  for (let i = 0; i < 20; i++) {\n    autoId += AUTO_ID_CHARS.charAt(Math.floor(Math.random() * AUTO_ID_CHARS.length));\n  }\n  return autoId;\n}\n"],"mappings":"AAAA,IAAMA,UAAU,GAAG,kEAAkE;AAErF,IAAMC,aAAa,GAAG,gEAAgE;AAGtF,IAAIC,YAAY,GAAG,CAAC;AAMpB,IAAMC,aAAa,GAAG,EAAE;AAOxB,OAAO,SAASC,kBAAkB,GAAuB;EAAA,IAAtBC,gBAAgB,uEAAG,CAAC;EACrD,IAAMC,cAAc,GAAG,IAAIC,KAAK,CAAC,CAAC,CAAC;EACnC,IAAIC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGL,gBAAgB;EACjD,IAAMM,aAAa,GAAGH,GAAG,KAAKN,YAAY;EAE1CA,YAAY,GAAGM,GAAG;EAElB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC9BN,cAAc,CAACM,CAAC,CAAC,GAAGZ,UAAU,CAACa,MAAM,CAACL,GAAG,GAAG,EAAE,CAAC;IAC/CA,GAAG,GAAGM,IAAI,CAACC,KAAK,CAACP,GAAG,GAAG,EAAE,CAAC;EAC5B;EAEA,IAAIA,GAAG,KAAK,CAAC,EAAE;IACb,MAAM,IAAIQ,KAAK,CAAC,gDAAgD,CAAC;EACnE;EAEA,IAAIC,EAAE,GAAGX,cAAc,CAACY,IAAI,CAAC,EAAE,CAAC;EAEhC,IAAI,CAACP,aAAa,EAAE;IAClB,KAAK,IAAIC,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,EAAE,EAAEA,EAAC,IAAI,CAAC,EAAE;MAC9BT,aAAa,CAACS,EAAC,CAAC,GAAGE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACK,MAAM,EAAE,GAAG,EAAE,CAAC;IACnD;EACF,CAAC,MAAM;IAGL,IAAIP,GAAC;IACL,KAAKA,GAAC,GAAG,EAAE,EAAEA,GAAC,IAAI,CAAC,IAAIT,aAAa,CAACS,GAAC,CAAC,KAAK,EAAE,EAAEA,GAAC,IAAI,CAAC,EAAE;MACtDT,aAAa,CAACS,GAAC,CAAC,GAAG,CAAC;IACtB;IAEAT,aAAa,CAACS,GAAC,CAAC,IAAI,CAAC;EACvB;EAEA,KAAK,IAAIA,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,EAAE,EAAEA,GAAC,EAAE,EAAE;IAC3BK,EAAE,IAAIjB,UAAU,CAACa,MAAM,CAACV,aAAa,CAACS,GAAC,CAAC,CAAC;EAC3C;EAEA,IAAIK,EAAE,CAACG,MAAM,KAAK,EAAE,EAAE;IACpB,MAAM,IAAIJ,KAAK,CAAC,sBAAsB,CAAC;EACzC;EAEA,OAAOC,EAAE;AACX;AAMA,OAAO,SAASI,mBAAmB,GAAG;EACpC,IAAIC,MAAM,GAAG,EAAE;EAEf,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3BU,MAAM,IAAIrB,aAAa,CAACY,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACK,MAAM,EAAE,GAAGlB,aAAa,CAACmB,MAAM,CAAC,CAAC;EAClF;EACA,OAAOE,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}