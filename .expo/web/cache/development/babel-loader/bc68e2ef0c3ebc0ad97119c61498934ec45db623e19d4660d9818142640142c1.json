{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { hasOwnProperty, isAndroid, isBoolean, isFunction, isIOS, isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport remoteMessageOptions from \"./remoteMessageOptions\";\nimport version from \"./version\";\nexport { getMessaging, deleteToken, getToken, onMessage, onNotificationOpenedApp, onTokenRefresh, requestPermission, isAutoInitEnabled, setAutoInitEnabled, getInitialNotification, getDidOpenSettingsForNotification, getIsHeadless, registerDeviceForRemoteMessages, isDeviceRegisteredForRemoteMessages, unregisterDeviceForRemoteMessages, getAPNSToken, setAPNSToken, hasPermission, onDeletedMessages, onMessageSent, onSendError, setBackgroundMessageHandler, setOpenSettingsForNotificationsHandler, sendMessage, subscribeToTopic, unsubscribeFromTopic, experimentalSetDeliveryMetricsExportedToBigQueryEnabled, isDeliveryMetricsExportToBigQueryEnabled, isSupported } from \"../modular/index\";\nvar statics = {\n  AuthorizationStatus: {\n    NOT_DETERMINED: -1,\n    DENIED: 0,\n    AUTHORIZED: 1,\n    PROVISIONAL: 2,\n    EPHEMERAL: 3\n  },\n  NotificationAndroidPriority: {\n    PRIORITY_MIN: -2,\n    PRIORITY_LOW: -1,\n    PRIORITY_DEFAULT: 0,\n    PRIORITY_HIGH: 1,\n    PRIORITY_MAX: 2\n  },\n  NotificationAndroidVisibility: {\n    VISIBILITY_SECRET: -1,\n    VISIBILITY_PRIVATE: 0,\n    VISIBILITY_PUBLIC: 1\n  }\n};\nvar namespace = 'messaging';\nvar nativeModuleName = 'RNFBMessagingModule';\nvar backgroundMessageHandler;\nvar openSettingsForNotificationHandler;\nvar FirebaseMessagingModule = function (_FirebaseModule) {\n  _inherits(FirebaseMessagingModule, _FirebaseModule);\n  var _super = _createSuper(FirebaseMessagingModule);\n  function FirebaseMessagingModule() {\n    var _this;\n    _classCallCheck(this, FirebaseMessagingModule);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._isAutoInitEnabled = _this.native.isAutoInitEnabled != null ? _this.native.isAutoInitEnabled : true;\n    _this._isDeliveryMetricsExportToBigQueryEnabled = _this.native.isDeliveryMetricsExportToBigQueryEnabled != null ? _this.native.isDeliveryMetricsExportToBigQueryEnabled : false;\n    _this._isRegisteredForRemoteNotifications = _this.native.isRegisteredForRemoteNotifications != null ? _this.native.isRegisteredForRemoteNotifications : true;\n    AppRegistry.registerHeadlessTask('ReactNativeFirebaseMessagingHeadlessTask', function () {\n      if (!backgroundMessageHandler) {\n        console.warn('No background message handler has been set. Set a handler via the \"setBackgroundMessageHandler\" method.');\n        return function () {\n          return Promise.resolve();\n        };\n      }\n      return function (remoteMessage) {\n        return backgroundMessageHandler(remoteMessage);\n      };\n    });\n    if (isIOS) {\n      _this.emitter.addListener('messaging_message_received_background', function (remoteMessage) {\n        if (!backgroundMessageHandler) {\n          console.warn('No background message handler has been set. Set a handler via the \"setBackgroundMessageHandler\" method.');\n          return Promise.resolve();\n        }\n        return backgroundMessageHandler(remoteMessage);\n      });\n      _this.emitter.addListener('messaging_settings_for_notification_opened', function (remoteMessage) {\n        if (!openSettingsForNotificationHandler) {\n          console.warn('No handler for notification settings link has been set. Set a handler via the \"setOpenSettingsForNotificationsHandler\" method');\n          return Promise.resolve();\n        }\n        return openSettingsForNotificationHandler(remoteMessage);\n      });\n    }\n    return _this;\n  }\n  _createClass(FirebaseMessagingModule, [{\n    key: \"isAutoInitEnabled\",\n    get: function get() {\n      return this._isAutoInitEnabled;\n    }\n  }, {\n    key: \"isDeviceRegisteredForRemoteMessages\",\n    get: function get() {\n      if (isAndroid) {\n        return true;\n      }\n      return this._isRegisteredForRemoteNotifications;\n    }\n  }, {\n    key: \"isDeliveryMetricsExportToBigQueryEnabled\",\n    get: function get() {\n      return this._isDeliveryMetricsExportToBigQueryEnabled;\n    }\n  }, {\n    key: \"setAutoInitEnabled\",\n    value: function setAutoInitEnabled(enabled) {\n      if (!isBoolean(enabled)) {\n        throw new Error(\"firebase.messaging().setAutoInitEnabled(*) 'enabled' expected a boolean value.\");\n      }\n      this._isAutoInitEnabled = enabled;\n      return this.native.setAutoInitEnabled(enabled);\n    }\n  }, {\n    key: \"getInitialNotification\",\n    value: function getInitialNotification() {\n      return this.native.getInitialNotification().then(function (value) {\n        if (value) {\n          return value;\n        }\n        return null;\n      });\n    }\n  }, {\n    key: \"getDidOpenSettingsForNotification\",\n    value: function getDidOpenSettingsForNotification() {\n      if (!isIOS) return Promise.resolve(false);\n      return this.native.getDidOpenSettingsForNotification().then(function (value) {\n        return value;\n      });\n    }\n  }, {\n    key: \"getIsHeadless\",\n    value: function getIsHeadless() {\n      return this.native.getIsHeadless();\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        appName = _ref.appName,\n        senderId = _ref.senderId;\n      if (!isUndefined(appName) && !isString(appName)) {\n        throw new Error(\"firebase.messaging().getToken(*) 'appName' expected a string.\");\n      }\n      if (!isUndefined(senderId) && !isString(senderId)) {\n        throw new Error(\"firebase.messaging().getToken(*) 'senderId' expected a string.\");\n      }\n      return this.native.getToken(appName || this.app.name, senderId || this.app.options.messagingSenderId);\n    }\n  }, {\n    key: \"deleteToken\",\n    value: function deleteToken() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        appName = _ref2.appName,\n        senderId = _ref2.senderId;\n      if (!isUndefined(appName) && !isString(appName)) {\n        throw new Error(\"firebase.messaging().deleteToken(*) 'appName' expected a string.\");\n      }\n      if (!isUndefined(senderId) && !isString(senderId)) {\n        throw new Error(\"firebase.messaging().deleteToken(*) 'senderId' expected a string.\");\n      }\n      return this.native.deleteToken(appName || this.app.name, senderId || this.app.options.messagingSenderId);\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(listener) {\n      if (!isFunction(listener)) {\n        throw new Error(\"firebase.messaging().onMessage(*) 'listener' expected a function.\");\n      }\n      var subscription = this.emitter.addListener('messaging_message_received', listener);\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onNotificationOpenedApp\",\n    value: function onNotificationOpenedApp(listener) {\n      if (!isFunction(listener)) {\n        throw new Error(\"firebase.messaging().onNotificationOpenedApp(*) 'listener' expected a function.\");\n      }\n      var subscription = this.emitter.addListener('messaging_notification_opened', listener);\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onTokenRefresh\",\n    value: function onTokenRefresh(listener) {\n      if (!isFunction(listener)) {\n        throw new Error(\"firebase.messaging().onTokenRefresh(*) 'listener' expected a function.\");\n      }\n      var subscription = this.emitter.addListener('messaging_token_refresh', function (event) {\n        var token = event.token;\n        listener(token);\n      });\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"requestPermission\",\n    value: function requestPermission(permissions) {\n      if (isAndroid) {\n        return Promise.resolve(1);\n      }\n      var defaultPermissions = {\n        alert: true,\n        announcement: false,\n        badge: true,\n        carPlay: true,\n        provisional: false,\n        sound: true,\n        criticalAlert: false,\n        providesAppNotificationSettings: false\n      };\n      if (!permissions) {\n        return this.native.requestPermission(defaultPermissions);\n      }\n      if (!isObject(permissions)) {\n        throw new Error('firebase.messaging().requestPermission(*) expected an object value.');\n      }\n      Object.entries(permissions).forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n        if (!hasOwnProperty(defaultPermissions, key)) {\n          throw new Error(\"firebase.messaging().requestPermission(*) unexpected key \\\"\" + key + \"\\\" provided to permissions object.\");\n        }\n        if (!isBoolean(value)) {\n          throw new Error(\"firebase.messaging().requestPermission(*) the permission \\\"\" + key + \"\\\" expected a boolean value.\");\n        }\n        defaultPermissions[key] = value;\n      });\n      return this.native.requestPermission(defaultPermissions);\n    }\n  }, {\n    key: \"registerDeviceForRemoteMessages\",\n    value: function registerDeviceForRemoteMessages() {\n      if (isAndroid) {\n        return Promise.resolve();\n      }\n      var autoRegister = this.firebaseJson['messaging_ios_auto_register_for_remote_messages'];\n      if (autoRegister === undefined || autoRegister === true) {\n        console.warn(\"Usage of \\\"messaging().registerDeviceForRemoteMessages()\\\" is not required. You only need to register if auto-registration is disabled in your 'firebase.json' configuration file via the 'messaging_ios_auto_register_for_remote_messages' property.\");\n      }\n      this._isRegisteredForRemoteNotifications = true;\n      return this.native.registerForRemoteNotifications();\n    }\n  }, {\n    key: \"unregisterDeviceForRemoteMessages\",\n    value: function unregisterDeviceForRemoteMessages() {\n      if (isAndroid) {\n        return Promise.resolve();\n      }\n      this._isRegisteredForRemoteNotifications = false;\n      return this.native.unregisterForRemoteNotifications();\n    }\n  }, {\n    key: \"getAPNSToken\",\n    value: function getAPNSToken() {\n      if (isAndroid) {\n        return Promise.resolve(null);\n      }\n      return this.native.getAPNSToken();\n    }\n  }, {\n    key: \"setAPNSToken\",\n    value: function setAPNSToken(token, type) {\n      if (isUndefined(token) || !isString(token)) {\n        throw new Error(\"firebase.messaging().setAPNSToken(*) 'token' expected a string value.\");\n      }\n      if (!isUndefined(type) && (!isString(type) || !['prod', 'sandbox', 'unknown'].includes(type))) {\n        throw new Error(\"firebase.messaging().setAPNSToken(*) 'type' expected one of 'prod', 'sandbox', or 'unknown'.\");\n      }\n      if (isAndroid) {\n        return Promise.resolve(null);\n      }\n      return this.native.setAPNSToken(token, type);\n    }\n  }, {\n    key: \"hasPermission\",\n    value: function hasPermission() {\n      return this.native.hasPermission();\n    }\n  }, {\n    key: \"onDeletedMessages\",\n    value: function onDeletedMessages(listener) {\n      if (!isFunction(listener)) {\n        throw new Error(\"firebase.messaging().onDeletedMessages(*) 'listener' expected a function.\");\n      }\n      var subscription = this.emitter.addListener('messaging_message_deleted', listener);\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"onMessageSent\",\n    value: function onMessageSent(listener) {\n      if (!isFunction(listener)) {\n        throw new Error(\"firebase.messaging().onMessageSent(*) 'listener' expected a function.\");\n      }\n      var subscription = this.emitter.addListener('messaging_message_sent', listener);\n      return function () {\n        subscription.remove();\n      };\n    }\n  }, {\n    key: \"onSendError\",\n    value: function onSendError(listener) {\n      if (!isFunction(listener)) {\n        throw new Error(\"firebase.messaging().onSendError(*) 'listener' expected a function.\");\n      }\n      var subscription = this.emitter.addListener('messaging_message_send_error', listener);\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }, {\n    key: \"setBackgroundMessageHandler\",\n    value: function setBackgroundMessageHandler(handler) {\n      if (!isFunction(handler)) {\n        throw new Error(\"firebase.messaging().setBackgroundMessageHandler(*) 'handler' expected a function.\");\n      }\n      backgroundMessageHandler = handler;\n      if (isIOS) {\n        this.native.signalBackgroundMessageHandlerSet();\n      }\n    }\n  }, {\n    key: \"setOpenSettingsForNotificationsHandler\",\n    value: function setOpenSettingsForNotificationsHandler(handler) {\n      if (!isIOS) {\n        return;\n      }\n      if (!isFunction(handler)) {\n        throw new Error(\"firebase.messaging().setOpenSettingsForNotificationsHandler(*) 'handler' expected a function.\");\n      }\n      openSettingsForNotificationHandler = handler;\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(remoteMessage) {\n      if (isIOS) {\n        throw new Error(\"firebase.messaging().sendMessage() is only supported on Android devices.\");\n      }\n      var options;\n      try {\n        options = remoteMessageOptions(this.app.options.messagingSenderId, remoteMessage);\n      } catch (e) {\n        throw new Error(\"firebase.messaging().sendMessage(*) \" + e.message + \".\");\n      }\n      return this.native.sendMessage(options);\n    }\n  }, {\n    key: \"subscribeToTopic\",\n    value: function subscribeToTopic(topic) {\n      if (!isString(topic)) {\n        throw new Error(\"firebase.messaging().subscribeToTopic(*) 'topic' expected a string value.\");\n      }\n      if (topic.indexOf('/') > -1) {\n        throw new Error('firebase.messaging().subscribeToTopic(*) \\'topic\\' must not include \"/\".');\n      }\n      return this.native.subscribeToTopic(topic);\n    }\n  }, {\n    key: \"unsubscribeFromTopic\",\n    value: function unsubscribeFromTopic(topic) {\n      if (!isString(topic)) {\n        throw new Error(\"firebase.messaging().unsubscribeFromTopic(*) 'topic' expected a string value.\");\n      }\n      if (topic.indexOf('/') > -1) {\n        throw new Error('firebase.messaging().unsubscribeFromTopic(*) \\'topic\\' must not include \"/\".');\n      }\n      return this.native.unsubscribeFromTopic(topic);\n    }\n  }, {\n    key: \"useServiceWorker\",\n    value: function useServiceWorker() {\n      console.warn('firebase.messaging().useServiceWorker() is not supported on react-native-firebase.');\n    }\n  }, {\n    key: \"usePublicVapidKey\",\n    value: function usePublicVapidKey() {\n      console.warn('firebase.messaging().usePublicVapidKey() is not supported on react-native-firebase.');\n    }\n  }, {\n    key: \"setDeliveryMetricsExportToBigQuery\",\n    value: function setDeliveryMetricsExportToBigQuery(enabled) {\n      if (!isBoolean(enabled)) {\n        throw new Error(\"firebase.messaging().setDeliveryMetricsExportToBigQuery(*) 'enabled' expected a boolean value.\");\n      }\n      this._isDeliveryMetricsExportToBigQueryEnabled = enabled;\n      return this.native.setDeliveryMetricsExportToBigQuery(enabled);\n    }\n  }, {\n    key: \"isSupported\",\n    value: function () {\n      var _isSupported = _asyncToGenerator(function* () {\n        if (Platform.isAndroid) {\n          playServicesAvailability = firebase.utils().playServicesAvailability;\n          return playServicesAvailability.isAvailable;\n        }\n        return true;\n      });\n      function isSupported() {\n        return _isSupported.apply(this, arguments);\n      }\n      return isSupported;\n    }()\n  }]);\n  return FirebaseMessagingModule;\n}(FirebaseModule);\nexport var SDK_VERSION = version;\nexport default createModuleNamespace({\n  statics: statics,\n  version: version,\n  namespace: namespace,\n  nativeModuleName: nativeModuleName,\n  nativeEvents: ['messaging_token_refresh', 'messaging_message_sent', 'messaging_message_deleted', 'messaging_message_received', 'messaging_message_send_error', 'messaging_notification_opened'].concat(_toConsumableArray(isIOS ? ['messaging_message_received_background', 'messaging_settings_for_notification_opened'] : [])),\n  hasMultiAppSupport: false,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseMessagingModule\n});\nexport var firebase = getFirebaseRoot();","map":{"version":3,"names":["hasOwnProperty","isAndroid","isBoolean","isFunction","isIOS","isObject","isString","isUndefined","createModuleNamespace","FirebaseModule","getFirebaseRoot","remoteMessageOptions","version","getMessaging","deleteToken","getToken","onMessage","onNotificationOpenedApp","onTokenRefresh","requestPermission","isAutoInitEnabled","setAutoInitEnabled","getInitialNotification","getDidOpenSettingsForNotification","getIsHeadless","registerDeviceForRemoteMessages","isDeviceRegisteredForRemoteMessages","unregisterDeviceForRemoteMessages","getAPNSToken","setAPNSToken","hasPermission","onDeletedMessages","onMessageSent","onSendError","setBackgroundMessageHandler","setOpenSettingsForNotificationsHandler","sendMessage","subscribeToTopic","unsubscribeFromTopic","experimentalSetDeliveryMetricsExportedToBigQueryEnabled","isDeliveryMetricsExportToBigQueryEnabled","isSupported","statics","AuthorizationStatus","NOT_DETERMINED","DENIED","AUTHORIZED","PROVISIONAL","EPHEMERAL","NotificationAndroidPriority","PRIORITY_MIN","PRIORITY_LOW","PRIORITY_DEFAULT","PRIORITY_HIGH","PRIORITY_MAX","NotificationAndroidVisibility","VISIBILITY_SECRET","VISIBILITY_PRIVATE","VISIBILITY_PUBLIC","namespace","nativeModuleName","backgroundMessageHandler","openSettingsForNotificationHandler","FirebaseMessagingModule","args","_isAutoInitEnabled","native","_isDeliveryMetricsExportToBigQueryEnabled","_isRegisteredForRemoteNotifications","isRegisteredForRemoteNotifications","AppRegistry","registerHeadlessTask","console","warn","Promise","resolve","remoteMessage","emitter","addListener","enabled","Error","then","value","appName","senderId","app","name","options","messagingSenderId","listener","subscription","remove","event","token","permissions","defaultPermissions","alert","announcement","badge","carPlay","provisional","sound","criticalAlert","providesAppNotificationSettings","Object","entries","forEach","key","autoRegister","firebaseJson","undefined","registerForRemoteNotifications","unregisterForRemoteNotifications","type","includes","handler","signalBackgroundMessageHandlerSet","e","message","topic","indexOf","setDeliveryMetricsExportToBigQuery","Platform","playServicesAvailability","firebase","utils","isAvailable","SDK_VERSION","nativeEvents","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass"],"sources":["C:/Users/dansf/Desktop/reactNative/PJ/node_modules/@react-native-firebase/messaging/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  hasOwnProperty,\n  isAndroid,\n  isBoolean,\n  isFunction,\n  isIOS,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport { AppRegistry, Platform } from 'react-native';\nimport remoteMessageOptions from './remoteMessageOptions';\nimport version from './version';\n\nexport {\n  getMessaging,\n  deleteToken,\n  getToken,\n  onMessage,\n  onNotificationOpenedApp,\n  onTokenRefresh,\n  requestPermission,\n  isAutoInitEnabled,\n  setAutoInitEnabled,\n  getInitialNotification,\n  getDidOpenSettingsForNotification,\n  getIsHeadless,\n  registerDeviceForRemoteMessages,\n  isDeviceRegisteredForRemoteMessages,\n  unregisterDeviceForRemoteMessages,\n  getAPNSToken,\n  setAPNSToken,\n  hasPermission,\n  onDeletedMessages,\n  onMessageSent,\n  onSendError,\n  setBackgroundMessageHandler,\n  setOpenSettingsForNotificationsHandler,\n  sendMessage,\n  subscribeToTopic,\n  unsubscribeFromTopic,\n  experimentalSetDeliveryMetricsExportedToBigQueryEnabled,\n  isDeliveryMetricsExportToBigQueryEnabled,\n  isSupported,\n} from '../modular/index';\n\nconst statics = {\n  AuthorizationStatus: {\n    NOT_DETERMINED: -1,\n    DENIED: 0,\n    AUTHORIZED: 1,\n    PROVISIONAL: 2,\n    EPHEMERAL: 3,\n  },\n  NotificationAndroidPriority: {\n    PRIORITY_MIN: -2,\n    PRIORITY_LOW: -1,\n    PRIORITY_DEFAULT: 0,\n    PRIORITY_HIGH: 1,\n    PRIORITY_MAX: 2,\n  },\n  NotificationAndroidVisibility: {\n    VISIBILITY_SECRET: -1,\n    VISIBILITY_PRIVATE: 0,\n    VISIBILITY_PUBLIC: 1,\n  },\n};\n\nconst namespace = 'messaging';\n\nconst nativeModuleName = 'RNFBMessagingModule';\n\nlet backgroundMessageHandler;\nlet openSettingsForNotificationHandler;\n\nclass FirebaseMessagingModule extends FirebaseModule {\n  constructor(...args) {\n    super(...args);\n    this._isAutoInitEnabled =\n      this.native.isAutoInitEnabled != null ? this.native.isAutoInitEnabled : true;\n    this._isDeliveryMetricsExportToBigQueryEnabled =\n      this.native.isDeliveryMetricsExportToBigQueryEnabled != null\n        ? this.native.isDeliveryMetricsExportToBigQueryEnabled\n        : false;\n    this._isRegisteredForRemoteNotifications =\n      this.native.isRegisteredForRemoteNotifications != null\n        ? this.native.isRegisteredForRemoteNotifications\n        : true;\n\n    AppRegistry.registerHeadlessTask('ReactNativeFirebaseMessagingHeadlessTask', () => {\n      if (!backgroundMessageHandler) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'No background message handler has been set. Set a handler via the \"setBackgroundMessageHandler\" method.',\n        );\n        return () => Promise.resolve();\n      }\n      return remoteMessage => backgroundMessageHandler(remoteMessage);\n    });\n\n    if (isIOS) {\n      this.emitter.addListener('messaging_message_received_background', remoteMessage => {\n        if (!backgroundMessageHandler) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            'No background message handler has been set. Set a handler via the \"setBackgroundMessageHandler\" method.',\n          );\n          return Promise.resolve();\n        }\n\n        return backgroundMessageHandler(remoteMessage);\n      });\n\n      this.emitter.addListener('messaging_settings_for_notification_opened', remoteMessage => {\n        if (!openSettingsForNotificationHandler) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            'No handler for notification settings link has been set. Set a handler via the \"setOpenSettingsForNotificationsHandler\" method',\n          );\n\n          return Promise.resolve();\n        }\n\n        return openSettingsForNotificationHandler(remoteMessage);\n      });\n    }\n  }\n\n  get isAutoInitEnabled() {\n    return this._isAutoInitEnabled;\n  }\n\n  /**\n   * @ios\n   */\n  get isDeviceRegisteredForRemoteMessages() {\n    if (isAndroid) {\n      return true;\n    }\n\n    return this._isRegisteredForRemoteNotifications;\n  }\n\n  get isDeliveryMetricsExportToBigQueryEnabled() {\n    return this._isDeliveryMetricsExportToBigQueryEnabled;\n  }\n\n  setAutoInitEnabled(enabled) {\n    if (!isBoolean(enabled)) {\n      throw new Error(\n        \"firebase.messaging().setAutoInitEnabled(*) 'enabled' expected a boolean value.\",\n      );\n    }\n\n    this._isAutoInitEnabled = enabled;\n    return this.native.setAutoInitEnabled(enabled);\n  }\n\n  getInitialNotification() {\n    return this.native.getInitialNotification().then(value => {\n      if (value) {\n        return value;\n      }\n      return null;\n    });\n  }\n\n  getDidOpenSettingsForNotification() {\n    if (!isIOS) return Promise.resolve(false);\n    return this.native.getDidOpenSettingsForNotification().then(value => value);\n  }\n\n  getIsHeadless() {\n    return this.native.getIsHeadless();\n  }\n\n  getToken({ appName, senderId } = {}) {\n    if (!isUndefined(appName) && !isString(appName)) {\n      throw new Error(\"firebase.messaging().getToken(*) 'appName' expected a string.\");\n    }\n\n    if (!isUndefined(senderId) && !isString(senderId)) {\n      throw new Error(\"firebase.messaging().getToken(*) 'senderId' expected a string.\");\n    }\n\n    return this.native.getToken(\n      appName || this.app.name,\n      senderId || this.app.options.messagingSenderId,\n    );\n  }\n\n  deleteToken({ appName, senderId } = {}) {\n    if (!isUndefined(appName) && !isString(appName)) {\n      throw new Error(\"firebase.messaging().deleteToken(*) 'appName' expected a string.\");\n    }\n\n    if (!isUndefined(senderId) && !isString(senderId)) {\n      throw new Error(\"firebase.messaging().deleteToken(*) 'senderId' expected a string.\");\n    }\n\n    return this.native.deleteToken(\n      appName || this.app.name,\n      senderId || this.app.options.messagingSenderId,\n    );\n  }\n\n  onMessage(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onMessage(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_message_received', listener);\n    return () => subscription.remove();\n  }\n\n  onNotificationOpenedApp(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\n        \"firebase.messaging().onNotificationOpenedApp(*) 'listener' expected a function.\",\n      );\n    }\n\n    const subscription = this.emitter.addListener('messaging_notification_opened', listener);\n    return () => subscription.remove();\n  }\n\n  onTokenRefresh(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onTokenRefresh(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_token_refresh', event => {\n      const { token } = event;\n      listener(token);\n    });\n    return () => subscription.remove();\n  }\n\n  /**\n   * @platform ios\n   */\n  requestPermission(permissions) {\n    if (isAndroid) {\n      return Promise.resolve(1);\n    }\n\n    const defaultPermissions = {\n      alert: true,\n      announcement: false,\n      badge: true,\n      carPlay: true,\n      provisional: false,\n      sound: true,\n      criticalAlert: false,\n      providesAppNotificationSettings: false,\n    };\n\n    if (!permissions) {\n      return this.native.requestPermission(defaultPermissions);\n    }\n\n    if (!isObject(permissions)) {\n      throw new Error('firebase.messaging().requestPermission(*) expected an object value.');\n    }\n\n    Object.entries(permissions).forEach(([key, value]) => {\n      if (!hasOwnProperty(defaultPermissions, key)) {\n        throw new Error(\n          `firebase.messaging().requestPermission(*) unexpected key \"${key}\" provided to permissions object.`,\n        );\n      }\n\n      if (!isBoolean(value)) {\n        throw new Error(\n          `firebase.messaging().requestPermission(*) the permission \"${key}\" expected a boolean value.`,\n        );\n      }\n\n      defaultPermissions[key] = value;\n    });\n\n    return this.native.requestPermission(defaultPermissions);\n  }\n\n  registerDeviceForRemoteMessages() {\n    if (isAndroid) {\n      return Promise.resolve();\n    }\n\n    const autoRegister = this.firebaseJson['messaging_ios_auto_register_for_remote_messages'];\n    if (autoRegister === undefined || autoRegister === true) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Usage of \"messaging().registerDeviceForRemoteMessages()\" is not required. You only need to register if auto-registration is disabled in your 'firebase.json' configuration file via the 'messaging_ios_auto_register_for_remote_messages' property.`,\n      );\n    }\n\n    this._isRegisteredForRemoteNotifications = true;\n    return this.native.registerForRemoteNotifications();\n  }\n  /**\n   * @platform ios\n   */\n  unregisterDeviceForRemoteMessages() {\n    if (isAndroid) {\n      return Promise.resolve();\n    }\n    this._isRegisteredForRemoteNotifications = false;\n    return this.native.unregisterForRemoteNotifications();\n  }\n\n  /**\n   * @platform ios\n   */\n  getAPNSToken() {\n    if (isAndroid) {\n      return Promise.resolve(null);\n    }\n    return this.native.getAPNSToken();\n  }\n\n  /**\n   * @platform ios\n   */\n  setAPNSToken(token, type) {\n    if (isUndefined(token) || !isString(token)) {\n      throw new Error(\"firebase.messaging().setAPNSToken(*) 'token' expected a string value.\");\n    }\n\n    if (!isUndefined(type) && (!isString(type) || !['prod', 'sandbox', 'unknown'].includes(type))) {\n      throw new Error(\n        \"firebase.messaging().setAPNSToken(*) 'type' expected one of 'prod', 'sandbox', or 'unknown'.\",\n      );\n    }\n\n    if (isAndroid) {\n      return Promise.resolve(null);\n    }\n\n    return this.native.setAPNSToken(token, type);\n  }\n\n  hasPermission() {\n    return this.native.hasPermission();\n  }\n\n  // https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService.html#public-void-ondeletedmessages-\n  onDeletedMessages(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onDeletedMessages(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_message_deleted', listener);\n    return () => subscription.remove();\n  }\n\n  // https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService.html#onMessageSent(java.lang.String)\n  onMessageSent(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onMessageSent(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_message_sent', listener);\n    return () => {\n      subscription.remove();\n    };\n  }\n\n  // https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService.html#onSendError(java.lang.String,%20java.lang.Exception)\n  onSendError(listener) {\n    if (!isFunction(listener)) {\n      throw new Error(\"firebase.messaging().onSendError(*) 'listener' expected a function.\");\n    }\n\n    const subscription = this.emitter.addListener('messaging_message_send_error', listener);\n    return () => subscription.remove();\n  }\n\n  /**\n   * Set a handler that will be called when a message is received while the app is in the background.\n   * Should be called before the app is registered in `AppRegistry`, for example in `index.js`.\n   * An app is considered to be in the background if no active window is displayed.\n   * @param handler called with an argument of type messaging.RemoteMessage that must be async and return a Promise\n   */\n  setBackgroundMessageHandler(handler) {\n    if (!isFunction(handler)) {\n      throw new Error(\n        \"firebase.messaging().setBackgroundMessageHandler(*) 'handler' expected a function.\",\n      );\n    }\n\n    backgroundMessageHandler = handler;\n    if (isIOS) {\n      this.native.signalBackgroundMessageHandlerSet();\n    }\n  }\n\n  setOpenSettingsForNotificationsHandler(handler) {\n    if (!isIOS) {\n      return;\n    }\n\n    if (!isFunction(handler)) {\n      throw new Error(\n        \"firebase.messaging().setOpenSettingsForNotificationsHandler(*) 'handler' expected a function.\",\n      );\n    }\n\n    openSettingsForNotificationHandler = handler;\n  }\n\n  sendMessage(remoteMessage) {\n    if (isIOS) {\n      throw new Error(`firebase.messaging().sendMessage() is only supported on Android devices.`);\n    }\n    let options;\n    try {\n      options = remoteMessageOptions(this.app.options.messagingSenderId, remoteMessage);\n    } catch (e) {\n      throw new Error(`firebase.messaging().sendMessage(*) ${e.message}.`);\n    }\n\n    return this.native.sendMessage(options);\n  }\n\n  subscribeToTopic(topic) {\n    if (!isString(topic)) {\n      throw new Error(\"firebase.messaging().subscribeToTopic(*) 'topic' expected a string value.\");\n    }\n\n    if (topic.indexOf('/') > -1) {\n      throw new Error('firebase.messaging().subscribeToTopic(*) \\'topic\\' must not include \"/\".');\n    }\n\n    return this.native.subscribeToTopic(topic);\n  }\n\n  unsubscribeFromTopic(topic) {\n    if (!isString(topic)) {\n      throw new Error(\n        \"firebase.messaging().unsubscribeFromTopic(*) 'topic' expected a string value.\",\n      );\n    }\n\n    if (topic.indexOf('/') > -1) {\n      throw new Error(\n        'firebase.messaging().unsubscribeFromTopic(*) \\'topic\\' must not include \"/\".',\n      );\n    }\n\n    return this.native.unsubscribeFromTopic(topic);\n  }\n\n  /**\n   * unsupported\n   */\n\n  useServiceWorker() {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'firebase.messaging().useServiceWorker() is not supported on react-native-firebase.',\n    );\n  }\n\n  usePublicVapidKey() {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'firebase.messaging().usePublicVapidKey() is not supported on react-native-firebase.',\n    );\n  }\n\n  setDeliveryMetricsExportToBigQuery(enabled) {\n    if (!isBoolean(enabled)) {\n      throw new Error(\n        \"firebase.messaging().setDeliveryMetricsExportToBigQuery(*) 'enabled' expected a boolean value.\",\n      );\n    }\n\n    this._isDeliveryMetricsExportToBigQueryEnabled = enabled;\n    return this.native.setDeliveryMetricsExportToBigQuery(enabled);\n  }\n\n  async isSupported() {\n    if (Platform.isAndroid) {\n      playServicesAvailability = firebase.utils().playServicesAvailability;\n      return playServicesAvailability.isAvailable;\n    }\n    // Always return \"true\" for iOS. Web will be implemented when it is supported\n    return true;\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/messaging';\nexport const SDK_VERSION = version;\n\n// import messaging from '@react-native-firebase/messaging';\n// messaging().X(...);\nexport default createModuleNamespace({\n  statics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents: [\n    'messaging_token_refresh',\n    'messaging_message_sent',\n    'messaging_message_deleted',\n    'messaging_message_received',\n    'messaging_message_send_error',\n    'messaging_notification_opened',\n    ...(isIOS\n      ? ['messaging_message_received_background', 'messaging_settings_for_notification_opened']\n      : []),\n  ],\n  hasMultiAppSupport: false,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseMessagingModule,\n});\n\n// import messaging, { firebase } from '@react-native-firebase/messaging';\n// messaging().X(...);\n// firebase.messaging().X(...);\nexport const firebase = getFirebaseRoot();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}