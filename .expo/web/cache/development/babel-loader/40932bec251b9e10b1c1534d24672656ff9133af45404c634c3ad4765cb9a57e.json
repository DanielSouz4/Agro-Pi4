{"ast":null,"code":"import { firebase } from '..';\nexport function getMessaging(app) {\n  if (app) {\n    return firebase.app(app.name).messaging();\n  }\n  return firebase.app().messaging();\n}\nexport function deleteToken(messaging, tokenOptions) {\n  if (tokenOptions != null) {\n    return messaging.deleteToken();\n  }\n  return messaging.deleteToken(tokenOptions);\n}\nexport function getToken(messaging, options) {\n  if (options != null) {\n    return messaging.getToken();\n  }\n  return messaging.getToken(options);\n}\nexport function onMessage(messaging, nextOrObserver) {\n  return messaging.onMessage(nextOrObserver);\n}\nexport function onNotificationOpenedApp(messaging, listener) {\n  return messaging.onNotificationOpenedApp(listener);\n}\nexport function onTokenRefresh(messaging, listener) {\n  return messaging.onTokenRefresh(listener);\n}\nexport function requestPermission(messaging, iosPermissions) {\n  return messaging.requestPermission(iosPermissions);\n}\nexport function isAutoInitEnabled(messaging) {\n  return messaging.isAutoInitEnabled;\n}\nexport function setAutoInitEnabled(messaging, enabled) {\n  return messaging.setAutoInitEnabled(enabled);\n}\nexport function getInitialNotification(messaging) {\n  return messaging.getInitialNotification();\n}\nexport function getDidOpenSettingsForNotification(messaging) {\n  return messaging.getDidOpenSettingsForNotification();\n}\nexport function getIsHeadless(messaging) {\n  return messaging.getIsHeadless();\n}\nexport function registerDeviceForRemoteMessages(messaging) {\n  return messaging.registerDeviceForRemoteMessages();\n}\nexport function isDeviceRegisteredForRemoteMessages(messaging) {\n  return messaging.isDeviceRegisteredForRemoteMessages;\n}\nexport function unregisterDeviceForRemoteMessages(messaging) {\n  return messaging.unregisterDeviceForRemoteMessages();\n}\nexport function getAPNSToken(messaging) {\n  return messaging.getAPNSToken();\n}\nexport function setAPNSToken(messaging, token, type) {\n  return messaging.setAPNSToken(token, type);\n}\nexport function hasPermission(messaging) {\n  return messaging.hasPermission();\n}\nexport function onDeletedMessages(messaging, listener) {\n  return messaging.onDeletedMessages(listener);\n}\nexport function onMessageSent(messaging, listener) {\n  return messaging.onMessageSent(listener);\n}\nexport function onSendError(messaging, listener) {\n  return messaging.onSendError(listener);\n}\nexport function setBackgroundMessageHandler(messaging, handler) {\n  return messaging.setBackgroundMessageHandler(handler);\n}\nexport function setOpenSettingsForNotificationsHandler(messaging, handler) {\n  return messaging.setOpenSettingsForNotificationsHandler(handler);\n}\nexport function sendMessage(messaging, message) {\n  return messaging.sendMessage(message);\n}\nexport function subscribeToTopic(messaging, topic) {\n  return messaging.subscribeToTopic(topic);\n}\nexport function unsubscribeFromTopic(messaging, topic) {\n  return messaging.unsubscribeFromTopic(topic);\n}\nexport function isDeliveryMetricsExportToBigQueryEnabled(messaging) {\n  return messaging.isDeliveryMetricsExportToBigQueryEnabled;\n}\nexport function isSupported(messaging) {\n  return messaging.isSupported();\n}\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {\n  return messaging.setDeliveryMetricsExportToBigQuery(enable);\n}","map":{"version":3,"names":["firebase","getMessaging","app","name","messaging","deleteToken","tokenOptions","getToken","options","onMessage","nextOrObserver","onNotificationOpenedApp","listener","onTokenRefresh","requestPermission","iosPermissions","isAutoInitEnabled","setAutoInitEnabled","enabled","getInitialNotification","getDidOpenSettingsForNotification","getIsHeadless","registerDeviceForRemoteMessages","isDeviceRegisteredForRemoteMessages","unregisterDeviceForRemoteMessages","getAPNSToken","setAPNSToken","token","type","hasPermission","onDeletedMessages","onMessageSent","onSendError","setBackgroundMessageHandler","handler","setOpenSettingsForNotificationsHandler","sendMessage","message","subscribeToTopic","topic","unsubscribeFromTopic","isDeliveryMetricsExportToBigQueryEnabled","isSupported","experimentalSetDeliveryMetricsExportedToBigQueryEnabled","enable","setDeliveryMetricsExportToBigQuery"],"sources":["C:/Users/dansf/Desktop/reactNative/PJ/node_modules/@react-native-firebase/messaging/modular/index.js"],"sourcesContent":["import { firebase } from '..';\n\n/**\n * Returns a Messaging instance for the given app.\n * @param app - FirebaseApp. Optional.\n * @returns {Messaging}\n */\nexport function getMessaging(app) {\n  if (app) {\n    return firebase.app(app.name).messaging();\n  }\n\n  return firebase.app().messaging();\n}\n\n/**\n * Removes access to an FCM token previously authorized by it's scope.\n * Messages sent by the server to this token will fail.\n * @param messaging Messaging instance.\n * @param tokenOptions Options to override senderId (iOS) and projectId (Android).\n * @returns {Promise<void>}\n */\nexport function deleteToken(messaging, tokenOptions) {\n  if (tokenOptions != null) {\n    return messaging.deleteToken();\n  }\n\n  return messaging.deleteToken(tokenOptions);\n}\n\n/**\n * Returns an FCM token for this device. Optionally you can specify a custom options to your own use-case.\n * @param messaging Messaging instance.\n * @param options Options to override senderId (iOS) and appName\n * @returns {Promise<string>}\n */\nexport function getToken(messaging, options) {\n  if (options != null) {\n    return messaging.getToken();\n  }\n\n  return messaging.getToken(options);\n}\n\n/**\n * When any FCM payload is received, the listener callback is called with a `RemoteMessage`.\n * > This subscriber method is only called when the app is active (in the foreground).\n * @param messaging Messaging instance.\n * @param listener Called with a `RemoteMessage` when a new FCM payload is received from the server.\n * @returns {Function}\n */\nexport function onMessage(messaging, nextOrObserver) {\n  return messaging.onMessage(nextOrObserver);\n}\n\n/**\n * When the user presses a notification displayed via FCM, this listener will be called if the app\n * has opened from a background state.\n * @param messaging Messaging instance.\n * @param listener Called with a `RemoteMessage` when a notification press opens the application.\n * @returns {Function}\n */\nexport function onNotificationOpenedApp(messaging, listener) {\n  return messaging.onNotificationOpenedApp(listener);\n}\n\n/**\n * Called when a new registration token is generated for the device. For example, this event can happen when a\n * token expires or when the server invalidates the token.\n * > This subscriber method is only called when the app is active (in the foreground).\n * @param messaging Messaging instance.\n * @param listener Called with a FCM token when the token is refreshed.\n * @returns {Function}\n */\nexport function onTokenRefresh(messaging, listener) {\n  return messaging.onTokenRefresh(listener);\n}\n\n/**\n * On iOS, messaging permission must be requested by the current application before messages can\n * be received or sent.\n * @param messaging Messaging instance.\n * @param iosPermissions All the available permissions for iOS that can be requested\n * @returns {Promise<AuthorizationStatus>}\n */\nexport function requestPermission(messaging, iosPermissions) {\n  return messaging.requestPermission(iosPermissions);\n}\n\n/**\n * Returns whether messaging auto initialization is enabled or disabled for the device.\n * @param messaging Messaging instance.\n * @returns {boolean}\n */\nexport function isAutoInitEnabled(messaging) {\n  return messaging.isAutoInitEnabled;\n}\n\n/**\n * Returns whether messaging auto initialization is enabled or disabled for the device.\n * @param messaging Messaging instance.\n * @param enabled A boolean value to enable or disable auto initialization.\n * @returns {Promise<boolean>}\n */\nexport function setAutoInitEnabled(messaging, enabled) {\n  return messaging.setAutoInitEnabled(enabled);\n}\n\n/**\n * When a notification from FCM has triggered the application to open from a quit state,\n * this method will return a `RemoteMessage` containing the notification data, or `null` if\n * the app was opened via another method.\n * @param messaging Messaging instance.\n * @returns {Promise<RemoteMessage | null>}\n */\nexport function getInitialNotification(messaging) {\n  return messaging.getInitialNotification();\n}\n\n/**\n * When the app is opened from iOS notifications settings from a quit state,\n * this method will return `true` or `false` if the app was opened via another method.\n * @param messaging Messaging instance.\n * @returns {Promise<boolean>}\n */\nexport function getDidOpenSettingsForNotification(messaging) {\n  return messaging.getDidOpenSettingsForNotification();\n}\n\n/**\n * Returns whether the root view is headless or not\n * i.e true if the app was launched in the background (for example, by data-only cloud message)\n * @param messaging Messaging instance.\n * @returns {Promise<boolean>}\n */\nexport function getIsHeadless(messaging) {\n  return messaging.getIsHeadless();\n}\n\n/**\n * On iOS, if your app wants to receive remote messages from FCM (via APNs), you must explicitly register\n * with APNs if auto-registration has been disabled.\n * @param messaging Messaging instance.\n * @returns {Promise<void>}\n */\nexport function registerDeviceForRemoteMessages(messaging) {\n  return messaging.registerDeviceForRemoteMessages();\n}\n\n/**\n * Returns a boolean value whether the user has registered for remote notifications via\n * `registerDeviceForRemoteMessages()`. For iOS. Android always returns `true`\n * @param messaging Messaging instance.\n * @returns {boolean}\n */\nexport function isDeviceRegisteredForRemoteMessages(messaging) {\n  return messaging.isDeviceRegisteredForRemoteMessages;\n}\n\n/**\n * Unregisters the app from receiving remote notifications.\n * @param messaging Messaging instance.\n * @returns {Promise<void>}\n */\nexport function unregisterDeviceForRemoteMessages(messaging) {\n  return messaging.unregisterDeviceForRemoteMessages();\n}\n\n/**\n * On iOS, it is possible to get the users APNs token. This may be required if you want to send messages to your\n * iOS devices without using the FCM service.\n * @param messaging Messaging instance.\n * @returns {Promise<string | null>}\n */\nexport function getAPNSToken(messaging) {\n  return messaging.getAPNSToken();\n}\n\n/**\n * On iOS, This method is used to set the APNs Token received by the application delegate.\n * Note that the token is expected to be a hexadecimal string, as it is an NSData type in\n * the underlying native firebase SDK, and raw data may only be passed as a string if it is\n * hex encoded. Calling code is responsible for correct encoding, you should verify by comparing\n * the results of `getAPNSToken()` with your token parameter to make sure they are equivalent\n *\n * Messaging uses method swizzling to ensure that the APNs token is set automatically.\n * However, if you have disabled swizzling by setting FirebaseAppDelegateProxyEnabled to NO\n * in your app’s Info.plist, you should manually set the APNs token in your application\n * delegate’s application(_:didRegisterForRemoteNotificationsWithDeviceToken:) method.\n *\n * If you would like to set the type of the APNs token, rather than relying on automatic\n * detection, provide a type of either 'prod', 'sandbox'. Omitting the type parameter\n * or specifying 'unknown' will rely on automatic type detection based on provisioning profile.\n *\n * At a native level you may also call objective-c `[FIRMessaging setAPNSToken];` as needed\n *\n * @param messaging Messaging instance.\n * @param {string} token a hexadecimal string representing your APNS token\n * @param {string?} type specifying 'prod', 'sandbox' or 'unknown' token type\n * @returns {Promise<void>}\n */\nexport function setAPNSToken(messaging, token, type) {\n  return messaging.setAPNSToken(token, type);\n}\n\n/**\n * Returns a `AuthorizationStatus` as to whether the user has messaging permission for this app.\n * @param messaging Messaging instance.\n * @returns {Promise<AuthorizationStatus>}\n */\nexport function hasPermission(messaging) {\n  return messaging.hasPermission();\n}\n\n/**\n * Called when the FCM server deletes pending messages.\n * @param messaging Messaging instance.\n * @param listener Called when the FCM deletes pending messages.\n * @returns {Function}\n */\nexport function onDeletedMessages(messaging, listener) {\n  return messaging.onDeletedMessages(listener);\n}\n\n/**\n * When sending a `RemoteMessage`, this listener is called when the message has been sent to FCM.\n * @param messaging Messaging instance.\n * @param listener Called when the FCM sends the remote message to FCM.\n * @returns {Function}\n */\nexport function onMessageSent(messaging, listener) {\n  return messaging.onMessageSent(listener);\n}\n\n/**\n * When sending a `RemoteMessage`, this listener is called when the message has been sent to FCM.\n * @param messaging Messaging instance.\n * @param listener Called when the FCM sends the remote message to FCM.\n * @returns {Function}\n */\nexport function onSendError(messaging, listener) {\n  return messaging.onSendError(listener);\n}\n\n/**\n * Set a message handler function which is called when the app is in the background\n * or terminated. In Android, a headless task is created, allowing you to access the React Native environment\n * to perform tasks such as updating local storage, or sending a network request.\n * @param messaging Messaging instance.\n * @param handler Called when a message is sent and the application is in a background or terminated state.\n * @returns {void}\n */\nexport function setBackgroundMessageHandler(messaging, handler) {\n  return messaging.setBackgroundMessageHandler(handler);\n}\n\n/**\n * Set a handler function which is called when the `${App Name} notifications settings`\n * link in iOS settings is clicked.\n * @param messaging Messaging instance.\n * @param handler Called when link in iOS settings is clicked\n * @returns {void}\n */\nexport function setOpenSettingsForNotificationsHandler(messaging, handler) {\n  return messaging.setOpenSettingsForNotificationsHandler(handler);\n}\n\n/**\n * Send a new `RemoteMessage` to the FCM server.\n * @param messaging Messaging instance.\n * @param message A `RemoteMessage` interface.\n * @returns {Promise<void>}\n */\nexport function sendMessage(messaging, message) {\n  return messaging.sendMessage(message);\n}\n\n/**\n * Apps can subscribe to a topic, which allows the FCM server to send targeted messages to only those\n * devices subscribed to that topic.\n * @param messaging Messaging instance.\n * @param topic The topic name.\n * @returns {Promise<void>}\n */\nexport function subscribeToTopic(messaging, topic) {\n  return messaging.subscribeToTopic(topic);\n}\n\n/**\n * Unsubscribe the device from a topic.\n * @param messaging Messaging instance.\n * @param topic The topic name.\n * @returns {Promise<void>}\n */\nexport function unsubscribeFromTopic(messaging, topic) {\n  return messaging.unsubscribeFromTopic(topic);\n}\n\n/**\n * Returns a boolean whether message delivery metrics are exported to BigQuery.\n * @param messaging Messaging instance.\n * @returns {boolean}\n */\nexport function isDeliveryMetricsExportToBigQueryEnabled(messaging) {\n  return messaging.isDeliveryMetricsExportToBigQueryEnabled;\n}\n\n/**\n * Checks if all required APIs exist in the browser.\n * @param messaging Messaging instance.\n * @returns {boolean}\n */\nexport function isSupported(messaging) {\n  return messaging.isSupported();\n}\n\n/**\n * Sets whether message delivery metrics are exported to BigQuery is enabled or disabled.\n * The value is false by default. Set this to true to allow exporting of message delivery metrics to BigQuery.\n * @param messaging Messaging instance.\n * @param enabled A boolean value to enable or disable exporting of message delivery metrics to BigQuery.\n * @returns {Promise<void>}\n */\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {\n  return messaging.setDeliveryMetricsExportToBigQuery(enable);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}